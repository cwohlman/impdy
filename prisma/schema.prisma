datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  cards    Card[] @relation("user")
  assignedCards Card[] @relation("assignee")
  authoredCards Card[] @relation("author")
  sharedCards CardShare[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Card {
  id      String @id @default(cuid())
  content String // one line string or multi line markdown

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Card?  @relation(name: "parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Card[] @relation(name: "parent")
  parentId String?

  resolution   Card?  @relation(name: "resolution", fields: [resolutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resolves     Card[] @relation(name: "resolution")
  resolutionId String?

  project   Card?  @relation(name: "project", fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tasks     Card[] @relation(name: "project")
  projectId String?

  user   User   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String 

  assignee   User?   @relation(name: "assignee", fields: [assigneeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assigneeId String?

  author   User   @relation(name: "author", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  flags  Flag[]
  shares CardShare[]
}

model CardShare {
  cardId String
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, userId])
}

model Flag {
  id      String @id @default(cuid())
  keyword String
  input   String // the exact text which caused the keyword to be added

  createdAt DateTime @default(now())

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardId String
}